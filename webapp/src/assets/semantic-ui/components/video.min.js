/*!
 * # Semantic UI 2.0.0 - Video
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2014 Contributorss
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
!(function (e, o, t, n) { 'use strict'; e.fn.video = function (t) { { var a; var i = e(this); var r = i.selector || ''; var l = (new Date()).getTime(); var c = []; var u = arguments[0]; var s = typeof u === 'string'; var m = [].slice.call(arguments, 1); o.requestAnimationFrame || o.mozRequestAnimationFrame || o.webkitRequestAnimationFrame || o.msRequestAnimationFrame || function (e) { setTimeout(e, 0) } } return i.each(function () { var d; var p = e.isPlainObject(t) ? e.extend(!0, {}, e.fn.video.settings, t) : e.extend({}, e.fn.video.settings); var f = p.selector; var g = p.className; var h = p.error; var v = p.metadata; var b = p.namespace; var y = p.templates; var w = '.' + b; var x = 'module-' + b; var F = (e(o), e(this)); var C = F.find(f.placeholder); var E = F.find(f.playButton); var T = F.find(f.embed); var A = this; var P = F.data(x); d = { initialize: function () { d.debug('Initializing video'), d.create(), F.on('click' + w, f.placeholder, d.play).on('click' + w, f.playButton, d.play), d.instantiate() }, instantiate: function () { d.verbose('Storing instance of module', d), P = d, F.data(x, d) }, create: function () { var e = F.data(v.image); var o = y.video(e); F.html(o), d.refresh(), e || d.play(), d.debug('Creating html for video element', o) }, destroy: function () { d.verbose('Destroying previous instance of video'), d.reset(), F.removeData(x).off(w) }, refresh: function () { d.verbose('Refreshing selector cache'), C = F.find(f.placeholder), E = F.find(f.playButton), T = F.find(f.embed) }, change: function (e, o, t) { d.debug('Changing video to ', e, o, t), F.data(v.source, e).data(v.id, o).data(v.url, t), p.onChange() }, reset: function () { d.debug('Clearing video embed and showing placeholder'), F.removeClass(g.active), T.html(' '), C.show(), p.onReset() }, play: function () { d.debug('Playing video'); var e = F.data(v.source) || !1; var o = F.data(v.url) || !1; var t = F.data(v.id) || !1; T.html(d.generate.html(e, t, o)), F.addClass(g.active), p.onPlay() }, get: { source: function (e) { return typeof e !== 'string' ? !1 : e.search('youtube.com') !== -1 ? 'youtube' : e.search('vimeo.com') !== -1 ? 'vimeo' : !1 }, id: function (e) { return e.match(p.regExp.youtube) ? e.match(p.regExp.youtube)[1] : e.match(p.regExp.vimeo) ? e.match(p.regExp.vimeo)[2] : !1 } }, generate: { html: function (e, o, t) { d.debug('Generating embed html'); var n; return e = e || p.source, o = o || p.id, e && o || t ? (e && o || (e = d.get.source(t), o = d.get.id(t)), e == 'vimeo' ? n = '<iframe src="//player.vimeo.com/video/' + o + '?=' + d.generate.url(e) + '" width="100%" height="100%" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>' : e == 'youtube' && (n = '<iframe src="//www.youtube.com/embed/' + o + '?=' + d.generate.url(e) + '" width="100%" height="100%" frameborder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>')) : d.error(h.noVideo), n }, url: function (e) { var o = p.api ? 1 : 0; var t = p.autoplay === 'auto' ? F.data('image') !== n : p.autoplay; var a = p.hd ? 1 : 0; var i = p.showUI ? 1 : 0; var r = p.showUI ? 0 : 1; var l = ''; return e == 'vimeo' && (l = 'api=' + o + '&amp;title=' + i + '&amp;byline=' + i + '&amp;portrait=' + i + '&amp;autoplay=' + t, p.color && (l += '&amp;color=' + p.color)), e == 'ustream' ? (l = 'autoplay=' + t, p.color && (l += '&amp;color=' + p.color)) : e == 'youtube' && (l = 'enablejsapi=' + o + '&amp;autoplay=' + t + '&amp;autohide=' + r + '&amp;hq=' + a + '&amp;modestbranding=1', p.color && (l += '&amp;color=' + p.color)), l } }, setting: function (o, t) { if (d.debug('Changing setting', o, t), e.isPlainObject(o))e.extend(!0, p, o); else { if (t === n) return p[o]; p[o] = t } }, internal: function (o, t) { if (e.isPlainObject(o))e.extend(!0, d, o); else { if (t === n) return d[o]; d[o] = t } }, debug: function () { p.debug && (p.performance ? d.performance.log(arguments) : (d.debug = Function.prototype.bind.call(console.info, console, p.name + ':'), d.debug.apply(console, arguments))) }, verbose: function () { p.verbose && p.debug && (p.performance ? d.performance.log(arguments) : (d.verbose = Function.prototype.bind.call(console.info, console, p.name + ':'), d.verbose.apply(console, arguments))) }, error: function () { d.error = Function.prototype.bind.call(console.error, console, p.name + ':'), d.error.apply(console, arguments) }, performance: { log: function (e) { var o, t, n; p.performance && (o = (new Date()).getTime(), n = l || o, t = o - n, l = o, c.push({ Name: e[0], Arguments: [].slice.call(e, 1) || '', Element: A, 'Execution Time': t })), clearTimeout(d.performance.timer), d.performance.timer = setTimeout(d.performance.display, 500) }, display: function () { var o = p.name + ':'; var t = 0; l = !1, clearTimeout(d.performance.timer), e.each(c, function (e, o) { t += o['Execution Time'] }), o += ' ' + t + 'ms', r && (o += " '" + r + "'"), i.length > 1 && (o += ' (' + i.length + ')'), (console.group !== n || console.table !== n) && c.length > 0 && (console.groupCollapsed(o), console.table ? console.table(c) : e.each(c, function (e, o) { console.log(o.Name + ': ' + o['Execution Time'] + 'ms') }), console.groupEnd()), c = [] } }, invoke: function (o, t, i) { var r; var l; var c; var u = P; return t = t || m, i = A || i, typeof o === 'string' && u !== n && (o = o.split(/[\. ]/), r = o.length - 1, e.each(o, function (t, a) { var i = t != r ? a + o[t + 1].charAt(0).toUpperCase() + o[t + 1].slice(1) : o; if (e.isPlainObject(u[i]) && t != r)u = u[i]; else { if (u[i] !== n) return l = u[i], !1; if (!e.isPlainObject(u[a]) || t == r) return u[a] !== n ? (l = u[a], !1) : (d.error(h.method, o), !1); u = u[a] } })), e.isFunction(l) ? c = l.apply(i, t) : l !== n && (c = l), e.isArray(a) ? a.push(c) : a !== n ? a = [a, c] : c !== n && (a = c), l } }, s ? (P === n && d.initialize(), d.invoke(u)) : (P !== n && P.invoke('destroy'), d.initialize()) }), a !== n ? a : this }, e.fn.video.settings = { name: 'Video', namespace: 'video', debug: !1, verbose: !1, performance: !0, metadata: { id: 'id', image: 'image', source: 'source', url: 'url' }, source: !1, url: !1, id: !1, aspectRatio: 16 / 9, onPlay: function () {}, onReset: function () {}, onChange: function () {}, onPause: function () {}, onStop: function () {}, width: 'auto', height: 'auto', autoplay: 'auto', color: '#442359', hd: !0, showUI: !1, api: !0, regExp: { youtube: /^(?:https?:\/\/)?(?:www\.)?(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})(?:\S+)?$/, vimeo: /http:\/\/(www\.)?vimeo.com\/(\d+)($|\/)/ }, error: { noVideo: 'No video specified', method: 'The method you called is not defined' }, className: { active: 'active' }, selector: { embed: '.embed', placeholder: '.placeholder', playButton: '.play' } }, e.fn.video.settings.templates = { video: function (e) { var o = ''; return e && (o += '<i class="video play icon"></i><img class="placeholder" src="' + e + '">'), o += '<div class="embed"></div>' } } }(jQuery, window, document))
